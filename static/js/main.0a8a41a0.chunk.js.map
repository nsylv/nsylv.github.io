{"version":3,"sources":["words.ts","reducers/description.ts","reducers/index.ts","actions/types.ts","WordCloud.tsx","actions/actions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["words","text","value","description","INITIAL_STATE","rootReducer","combineReducers","state","action","type","payload","options","rotations","fontSizes","padding","WordCloud","dispatch","useDispatch","callbacks","getWordTooltip","word","onWordMouseOver","minSize","store","createStore","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAAaA,EAAQ,CACnB,CACEC,KAAM,QACNC,MAAO,KACPC,YAAa,+BAEf,CACEF,KAAM,QACNC,MAAO,IACPC,YACE,uEAEJ,CACEF,KAAM,aACNC,MAAO,IACPC,YAAa,2CAEf,CACEF,KAAM,OACNC,MAAO,IACPC,YAAa,sDAEf,CACEF,KAAM,SACNC,MAAO,IACPC,YAAa,oDAEf,CACEF,KAAM,aACNC,MAAO,IACPC,YAAa,gEAEf,CACEF,KAAM,OACNC,MAAO,IACPC,YACE,sGAEJ,CACEF,KAAM,MACNC,MAAO,IACPC,YACE,4EAEJ,CACEF,KAAM,cACNC,MAAO,IACPC,YACE,mFAEJ,CACEF,KAAM,UACNC,MAAO,IACPC,YAAa,oDAEf,CACEF,KAAM,aACNC,MAAO,IACPC,YACE,gFAEJ,CACEF,KAAM,gBACNC,MAAO,IACPC,YAAa,wBAEf,CACEF,KAAM,OACNC,MAAO,IACPC,YACE,wFAEJ,CACEF,KAAM,OACNC,MAAO,IACPC,YAAa,uCAEf,CACEF,KAAM,OACNC,MAAO,IACPC,YACE,2FAEJ,CACEF,KAAM,OACNC,MAAO,IACPC,YAAa,sDAEf,CACEF,KAAM,SACNC,MAAO,IACPC,YACE,qEAEJ,CACEF,KAAM,QACNC,MAAO,IACPC,YAAa,8DAEf,CACEF,KAAM,UACNC,MAAO,IACPC,YACE,mEAEJ,CACEF,KAAM,uBACNC,MAAO,IACPC,YAAa,0DAEf,CACEF,KAAM,kBACNC,MAAO,IACPC,YACE,qGAEJ,CACEF,KAAM,SACNC,MAAO,IACPC,YACE,6GAEJ,CACEF,KAAM,MACNC,MAAO,GACPC,YAAa,wDAEf,CACEF,KAAM,WACNC,MAAO,GACPC,YAAa,8BC3HXC,EAAkC,CACtCD,YAAaH,EAAM,GAAGG,aCLjB,IAAME,EAAcC,YAAgB,CACzCH,YDOK,WAGc,IAFnBI,EAEkB,uDAFVH,EACRI,EACkB,uCAClB,OAAQA,EAAOC,MACb,IEhB2B,kBFiBzB,OAAO,eAAKF,EAAZ,CAAmBJ,YAAaK,EAAOE,UACzC,QACE,OAAOH,M,QGZb,IAAMI,EAA6B,CACjCC,UAAW,EACXC,UAAW,CAAC,GAAI,KAChBC,QAAS,GAGJ,SAASC,IACd,IAAMC,EAAWC,cAEjB,OACE,kBAAC,IAAD,CACEjB,MAAOA,EACPkB,UAAW,CACTC,eAAgB,SAACC,GAAD,OAAUA,EAAKjB,aAAeiB,EAAKnB,MACnDoB,gBAAiB,SAACD,GAAD,OACfJ,ECnBD,CACLP,KFJ2B,kBEK3BC,QDiB8BU,EAAKjB,aAAe,SAEhDQ,QAASA,EACTW,QAAS,CAAC,IAAK,OEbrB,IAAMC,EAAQC,YAAYnB,GAcXoB,MAZf,WACE,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACf,yBAAKG,UAAU,OACb,kBAACX,EAAD,SCNYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a8a41a0.chunk.js","sourcesContent":["export const words = [\n  {\n    text: \"Nikki\",\n    value: 9001,\n    description: \"ðŸ‘‹ Hi, I'm Nikki!\",\n  },\n  {\n    text: \"React\",\n    value: 500,\n    description:\n      \"I have been working on an enterprise React app for the past 2 years\",\n  },\n  {\n    text: \"Typescript\",\n    value: 450,\n    description: \"I picked up Typescript about a year ago\",\n  },\n  {\n    text: \"Java\",\n    value: 350,\n    description: \"I work on our app whose backend is written in Java\",\n  },\n  {\n    text: \"Python\",\n    value: 200,\n    description: \"One of the first programming languages I learned\",\n  },\n  {\n    text: \"Javascript\",\n    value: 400,\n    description: \"I've done enough vanilla JS to know I really like Typescript\",\n  },\n  {\n    text: \"HTML\",\n    value: 380,\n    description:\n      \"Although I find myself reaching for React more often then not, I started off learning vanilla HTML\",\n  },\n  {\n    text: \"CSS\",\n    value: 380,\n    description:\n      \"Although I use CSS-in-JS at work, I have experience with vanilla CSS too\",\n  },\n  {\n    text: \"Spring Boot\",\n    value: 200,\n    description:\n      \"The app I'm currently working on uses Spring Boot for its server-side framework\",\n  },\n  {\n    text: \"GraphQL\",\n    value: 200,\n    description: \"Recently I've been learning GraphQL using Apollo\",\n  },\n  {\n    text: \"PostgreSQL\",\n    value: 180,\n    description:\n      \"The backing store of the enterprise app I have been working on is PostgreSQL\",\n  },\n  {\n    text: \"Elasticsearch\",\n    value: 170,\n    description: \"You know, for search\",\n  },\n  {\n    text: \"a11y\",\n    value: 170,\n    description:\n      \"I'm learning about a11y best practices and how to develop with accessibility in mind\",\n  },\n  {\n    text: \"blue\",\n    value: 100,\n    description: \"Fun fact: blue is my favorite color\",\n  },\n  {\n    text: \"dogs\",\n    value: 150,\n    description:\n      \"I grew up with dogs; I'm particularly fond of Border Collies as I showed one in Agility\",\n  },\n  {\n    text: \"cats\",\n    value: 150,\n    description: \"My cat's name is Chimichanga, he's an orange tabby\",\n  },\n  {\n    text: \"horses\",\n    value: 150,\n    description:\n      \"I grew up with horses, showing them in Hunter/Jumper and Dressage\",\n  },\n  {\n    text: \"goats\",\n    value: 150,\n    description: \"My family has several goats, including BUG (Big Ugly Goat)\",\n  },\n  {\n    text: \"alpacas\",\n    value: 150,\n    description:\n      \"My goal is to get some land so I can try owning alpacas as pets\",\n  },\n  {\n    text: \"stand up paddleboard\",\n    value: 120,\n    description: \"About a year ago I got my first SUP and now I'm hooked\",\n  },\n  {\n    text: \"home renovation\",\n    value: 120,\n    description:\n      'I purchased a 1908 \"fixer upper\", which I have been using to pick up rudimentary carpentry skills',\n  },\n  {\n    text: \"soccer\",\n    value: 150,\n    description:\n      \"I played on several different teams up through college, and I still love watching/kicking around the ball\",\n  },\n  {\n    text: \"MIT\",\n    value: 75,\n    description: \"I went to MIT where I studied 6-3 (Computer Science)\",\n  },\n  {\n    text: \"Illinois\",\n    value: 75,\n    description: \"I grew up in Wauconda, IL\",\n  },\n];\n","import { Actions, SET_DESCRIPTION } from \"../actions/types\";\nimport { words } from \"../words\";\n\ninterface DescriptionState {\n  description: string | null;\n}\n\nconst INITIAL_STATE: DescriptionState = {\n  description: words[0].description,\n};\n\nexport function descriptionReducer(\n  state = INITIAL_STATE,\n  action: Actions\n): DescriptionState {\n  switch (action.type) {\n    case SET_DESCRIPTION:\n      return { ...state, description: action.payload };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { descriptionReducer } from \"./description\";\n\nexport const rootReducer = combineReducers({\n  description: descriptionReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","export const SET_DESCRIPTION = \"SET_DESCRIPTION\";\n\ninterface SetDescriptionAction {\n  type: typeof SET_DESCRIPTION;\n  payload: string;\n}\n\nexport type Actions = SetDescriptionAction;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ReactWordcloud, { Options, Optional } from \"react-wordcloud\";\n\nimport { setDescription } from \"./actions/actions\";\nimport { words } from \"./words\";\n\nconst options: Optional<Options> = {\n  rotations: 0,\n  fontSizes: [30, 200],\n  padding: 8,\n};\n\nexport function WordCloud() {\n  const dispatch = useDispatch();\n\n  return (\n    <ReactWordcloud\n      words={words}\n      callbacks={{\n        getWordTooltip: (word) => word.description || word.text,\n        onWordMouseOver: (word) =>\n          dispatch(setDescription(word.description || null)),\n      }}\n      options={options}\n      minSize={[300, 300]}\n    />\n  );\n}\n","import { Actions, SET_DESCRIPTION } from \"./types\";\n\nexport function setDescription(description: string): Actions {\n  return {\n    type: SET_DESCRIPTION,\n    payload: description,\n  };\n}\n","import React from \"react\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\n\nimport \"tippy.js/dist/tippy.css\";\nimport \"tippy.js/animations/scale.css\";\n\nimport { rootReducer } from \"./reducers\";\n// import { Description } from \"./Description\";\nimport { WordCloud } from \"./WordCloud\";\n\nconst store = createStore(rootReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <WordCloud />\n        {/* replacing the description with tooltip */}\n        {/* <Description /> */}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}